#!/bin/bash

# Confluent Cloud Service Account Creator
# Creates service accounts in Confluent Cloud based on principals from msk_principals.json.
# 
# This script reads from msk_principals.json and creates corresponding service accounts
# in Confluent Cloud using the unified JAR utility.

set -euo pipefail

# Script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

# Default configuration
PRINCIPALS_FILE="$PROJECT_ROOT/generated_jsons/msk_jsons/msk_principals.json"
RBAC_FILE="$PROJECT_ROOT/generated_jsons/cc_jsons/cc_rbac.json"
OUTPUT_DIR="$PROJECT_ROOT/generated_jsons/cc_jsons"
OUTPUT_FILE="$OUTPUT_DIR/cc_service_accounts.json"
CREDENTIALS_DIR="$OUTPUT_DIR/cc_credentials"
CONFIG_FILE="$PROJECT_ROOT/ccloud.config"
ENVIRONMENT=""
DRY_RUN=false
VERBOSE=false
FORCE=false

# JAR file location
JAR_FILE="$PROJECT_ROOT/release/msk-to-confluent-cloud.jar"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output with icons
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_processing() {
    echo -e "${CYAN}‚è≥ $1${NC}"
}

print_file() {
    echo -e "${PURPLE}üìÑ $1${NC}"
}

print_stats() {
    echo -e "${GREEN}üìä $1${NC}"
}

# Function to show usage
show_usage() {
    cat << EOF
Confluent Cloud Service Account Creator

USAGE:
    $0 [OPTIONS]

DESCRIPTION:
    Creates service accounts in Confluent Cloud based on principals extracted from MSK ACLs.
    Reads from msk_principals.json and creates corresponding service accounts using the 
    Confluent Cloud API.

    The script will:
    1. ‚úÖ Create service accounts if not present (reading from msk_principals.json)
    2. üîó Get resource IDs from the created service accounts
    3. üìù Update cc_rbac.json file, adding resource ID to each principal block
    4. üìÑ Create cc_service_accounts.json with all service account details (name, user ID, etc.)
    5. üìä Display terminal output with appropriate status icons

OPTIONS:
    -p, --principals-file FILE    MSK principals JSON file (default: generated_jsons/msk_jsons/msk_principals.json)
    -c, --config FILE            Confluent Cloud config file (default: ccloud.config)
    -d, --dry-run                Show what would be created without actually creating
    -v, --verbose                Enable verbose logging
    -h, --help                   Show this help message

EXAMPLES:
    # Create service accounts with default settings
    $0

    # Dry run to see what would be created
    $0 --dry-run

    # Use custom files with verbose output
    $0 --principals-file my_principals.json --config my_ccloud.config --verbose

PREREQUISITES:
    1. Confluent Cloud config file with API key and secret
    2. MSK principals JSON file (generated by extract-msk-metadata.sh)
    3. Built JAR file (run ./build.sh first)

WORKFLOW:
    This script is typically run as part of the migration workflow:
    1. Extract MSK metadata (including principals)
    2. Convert ACLs to RBAC format
    3. Create topics in Confluent Cloud
    4. ‚Üí Create service accounts in Confluent Cloud ‚Üê (this script)
    5. Apply RBAC role bindings

OUTPUT:
    The script creates a detailed JSON file at: generated_jsons/cc_jsons/cc_service_accounts.json
    This file contains:
    - Service account names and IDs
    - Creation status (created/existing/failed)
    - Original MSK principal information
    - ACL counts and permissions
    - Confluent Cloud service account details
    - Source cluster metadata

EOF
}

# Function to validate prerequisites
validate_prerequisites() {
    print_processing "Validating prerequisites..."
    
    # Check if JAR file exists
    if [[ ! -f "$JAR_FILE" ]]; then
        print_error "JAR file not found: $JAR_FILE"
        print_info "Please run './build.sh' first to build the project"
        exit 1
    fi
    
    # Check if principals file exists
    if [[ ! -f "$PRINCIPALS_FILE" ]]; then
        print_error "Principals file not found: $PRINCIPALS_FILE"
        print_info "Please run 'scripts/extract_msk_metadata/extract-msk-metadata.sh' first"
        exit 1
    fi
    
    # Check if config file exists
    if [[ ! -f "$CONFIG_FILE" ]]; then
        print_error "Config file not found: $CONFIG_FILE"
        print_info "Please create a Confluent Cloud config file with your API credentials"
        exit 1
    fi
    
    # Check if Java is available
    if ! command -v java &> /dev/null; then
        print_error "Java is not installed or not in PATH"
        exit 1
    fi
    
    print_success "All prerequisites validated"
}

# Function to show configuration summary
show_config_summary() {
    print_info "Configuration Summary:"
    echo "  üìÑ Principals file: $PRINCIPALS_FILE"
    echo "  ‚öôÔ∏è  Config file: $CONFIG_FILE"
    echo "  üì¶ JAR file: $JAR_FILE"
    echo "  üìÑ Output file: $OUTPUT_FILE"
    echo "  üìÑ RBAC file: $RBAC_FILE"
    echo "  üîç Dry run: $DRY_RUN"
    echo "  üìù Verbose: $VERBOSE"
    echo
}

# Function to show principals summary
show_principals_summary() {
    if [[ -f "$PRINCIPALS_FILE" ]]; then
        local principal_count=$(jq -r '.principals | length' "$PRINCIPALS_FILE" 2>/dev/null || echo "unknown")
        local cluster_name=$(jq -r '.cluster_metadata.cluster_name // "unknown"' "$PRINCIPALS_FILE" 2>/dev/null || echo "unknown")
        
        print_info "MSK Principals Summary:"
        echo "  üè∑Ô∏è  Source cluster: $cluster_name"
        echo "  üë• Total principals: $principal_count"
        echo
    fi
}

# Function to create service accounts
create_service_accounts() {
    print_processing "Creating service accounts in Confluent Cloud..."
    
    # Build Java command
    local java_cmd="java -jar \"$JAR_FILE\" create-service-accounts"
    java_cmd="$java_cmd \"$PRINCIPALS_FILE\" \"$CONFIG_FILE\""
    
    if [[ "$DRY_RUN" == "true" ]]; then
        java_cmd="$java_cmd --dry-run"
    fi
    
    if [[ "$VERBOSE" == "true" ]]; then
        java_cmd="$java_cmd --verbose"
    fi
    
    print_info "Executing: $java_cmd"
    echo
    
    # Execute the command
    if eval "$java_cmd"; then
        print_success "Service account creation completed successfully!"
        return 0
    else
        print_error "Service account creation failed!"
        return 1
    fi
}

# Function to update RBAC file with service account resource IDs
update_rbac_with_resource_ids() {
    print_processing "Updating RBAC file with service account IDs..."
    
    # Check if both files exist
    if [[ ! -f "$OUTPUT_FILE" ]]; then
        print_warning "Service accounts output file not found: $OUTPUT_FILE"
        print_info "Skipping RBAC file update"
        return 0
    fi
    
    if [[ ! -f "$RBAC_FILE" ]]; then
        print_warning "RBAC file not found: $RBAC_FILE"
        print_info "Skipping RBAC file update"
        return 0
    fi
    
    # Debug: Show what service accounts are available
    if [[ "$VERBOSE" == "true" ]]; then
        print_info "Available service accounts for mapping:"
        jq -r '.service_accounts[] | "  üë§ Name: \(.name), ID: \(.id // "null"), Status: \(.status)"' "$OUTPUT_FILE" 2>/dev/null || echo "  Could not parse service accounts"
        echo
        
        print_info "RBAC principals to update:"
        jq -r '.role_bindings[] | "  üîê Principal: \(.principal)"' "$RBAC_FILE" 2>/dev/null || echo "  Could not parse role bindings"
        jq -r '.service_accounts[] | "  üë§ Service Account: \(.name)"' "$RBAC_FILE" 2>/dev/null || echo "  Could not parse service accounts"
        echo
    fi
    
    # Create backup of original RBAC file
    local backup_file="${RBAC_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$RBAC_FILE" "$backup_file"
    print_info "Created backup: $backup_file"
    
    # Create temporary file for processing
    local temp_file=$(mktemp)
    
    # Use jq to update the RBAC file with service account IDs (not full CRN)
    # Note: We'll include service accounts with valid IDs and mark existing ones with null IDs
    if jq --slurpfile service_accounts "$OUTPUT_FILE" '
        # Create a lookup map from service account name to service account info
        # Include accounts that have valid IDs (not null and not dry-run)
        ($service_accounts[0].service_accounts // [] | 
         map(select(.id != null and .id != "" and .id != "dry-run-id")) | 
         map({(.name): .id}) | add) as $id_map |
        
        # Create a lookup map for existing service accounts with null IDs
        ($service_accounts[0].service_accounts // [] | 
         map(select(.status == "existing" and (.id == null or .id == ""))) | 
         map({(.name): "EXISTING_ID_UNKNOWN"}) | add) as $existing_map |
        
        # Combine both maps
        ($id_map + $existing_map) as $combined_map |
        
        # Update role_bindings to add resource_id
        .role_bindings |= map(
            . + {
                "resource_id": ($combined_map[.principal] // null)
            }
        ) |
        
        # Update service_accounts to add resource_id
        .service_accounts |= map(
            . + {
                "resource_id": ($combined_map[.name] // null)
            }
        ) |
        
        # Add update metadata
        .rbac_update_metadata = {
            "updated_at": now | strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
            "updated_by": "create-cc-service-accounts.sh",
            "resource_ids_added": true,
            "resource_id_format": "service_account_id",
            "backup_file": "'$(basename "$backup_file")'",
            "available_mappings": ($combined_map | keys),
            "mapping_count": ($combined_map | length),
            "valid_id_count": ($id_map | length),
            "existing_unknown_id_count": ($existing_map | length)
        }
    ' "$RBAC_FILE" > "$temp_file" 2>/dev/null; then
        
        # Replace original file with updated content
        mv "$temp_file" "$RBAC_FILE"
        
        # Show summary of updates
        local updated_role_bindings=$(jq -r '.role_bindings | map(select(.resource_id != null)) | length' "$RBAC_FILE" 2>/dev/null || echo "0")
        local total_role_bindings=$(jq -r '.role_bindings | length' "$RBAC_FILE" 2>/dev/null || echo "0")
        local updated_service_accounts=$(jq -r '.service_accounts | map(select(.resource_id != null)) | length' "$RBAC_FILE" 2>/dev/null || echo "0")
        local total_service_accounts=$(jq -r '.service_accounts | length' "$RBAC_FILE" 2>/dev/null || echo "0")
        local available_mappings=$(jq -r '.rbac_update_metadata.mapping_count // 0' "$RBAC_FILE" 2>/dev/null || echo "0")
        local valid_id_count=$(jq -r '.rbac_update_metadata.valid_id_count // 0' "$RBAC_FILE" 2>/dev/null || echo "0")
        local existing_unknown_count=$(jq -r '.rbac_update_metadata.existing_unknown_id_count // 0' "$RBAC_FILE" 2>/dev/null || echo "0")
        
        if [[ "$available_mappings" -eq 0 ]]; then
            print_warning "No service account mappings found!"
            print_info "This could be because:"
            echo "  ‚Ä¢ Service account creation failed"
            echo "  ‚Ä¢ Service accounts already exist but weren't properly detected"
            echo "  ‚Ä¢ Name mismatch between RBAC file and service accounts file"
            echo
        else
            print_success "RBAC file updated successfully!"
            
            if [[ "$existing_unknown_count" -gt 0 ]]; then
                print_info "Note: $existing_unknown_count service account(s) exist but their IDs could not be retrieved."
                print_info "These are marked as 'EXISTING_ID_UNKNOWN' in the RBAC file."
                echo "  ‚Ä¢ This typically happens when service accounts exist but aren't visible via API"
                echo "  ‚Ä¢ You may need to manually update these resource IDs later"
                echo "  ‚Ä¢ Or use the Confluent Cloud Console to find the service account IDs"
                echo
            fi
        fi
        
        print_stats "Update Summary:"
        echo "  üîê Role bindings updated: $updated_role_bindings/$total_role_bindings"
        echo "  üë§ Service accounts updated: $updated_service_accounts/$total_service_accounts"
        echo "  üó∫Ô∏è  Total mappings: $available_mappings"
        echo "  ‚úÖ Valid IDs: $valid_id_count"
        echo "  ‚ö†Ô∏è  Existing (ID unknown): $existing_unknown_count"
        echo "  üìÑ Updated file: $RBAC_FILE"
        echo "  üíæ Backup file: $backup_file"
        echo
        
        # Show sample of updated role bindings
        if [[ "$updated_role_bindings" -gt 0 ]]; then
            print_info "Sample updated role binding:"
            jq -r '.role_bindings[0] | "  üë§ Principal: \(.principal)\n  üÜî Resource ID: \(.resource_id // "null")\n  üéØ Role: \(.role)\n  üìã Resource: \(.resource_type):\(.resource_name)"' "$RBAC_FILE" 2>/dev/null || echo "  Could not parse role binding details"
            echo
        else
            print_warning "No role bindings were updated with resource IDs"
            print_info "Troubleshooting steps:"
            echo "  1. Check if service account names match between files"
            echo "  2. Verify service accounts were created successfully"
            echo "  3. Run with --verbose to see detailed mapping information"
            echo
        fi
        
    else
        print_error "Failed to update RBAC file with resource IDs"
        rm -f "$temp_file"
        return 1
    fi
}

# Function to show output file summary
show_output_summary() {
    if [[ -f "$OUTPUT_FILE" ]]; then
        print_file "Service Account Details File: $OUTPUT_FILE"
        
        # Extract summary from the output file
        local total=$(jq -r '.metadata.total_principals_processed // 0' "$OUTPUT_FILE" 2>/dev/null || echo "0")
        local created=$(jq -r '.metadata.created_count // 0' "$OUTPUT_FILE" 2>/dev/null || echo "0")
        local existing=$(jq -r '.metadata.existing_count // 0' "$OUTPUT_FILE" 2>/dev/null || echo "0")
        local failed=$(jq -r '.metadata.failed_count // 0' "$OUTPUT_FILE" 2>/dev/null || echo "0")
        
        print_stats "Summary from output file:"
        echo "  üìä Total processed: $total"
        echo "  ‚úÖ Created: $created"
        echo "  üìã Already existing: $existing"
        echo "  ‚ùå Failed: $failed"
        echo
        
        # Show service account details
        if [[ "$total" -gt 0 ]]; then
            print_info "Service Account Details:"
            jq -r '.service_accounts[] | "  üë§ \(.name): \(.id) (\(.status)) - Resource ID: \(.resource_id // "N/A")"' "$OUTPUT_FILE" 2>/dev/null || echo "  Could not parse service account details"
            echo
        fi
    else
        print_warning "Output file not found: $OUTPUT_FILE"
    fi
}

# Function to show next steps
show_next_steps() {
    print_info "Next steps:"
    print_info "1. Create RBAC permissions:             ./scripts/create_cc_infra/create-cc-rbac.sh"
    print_info "   OR Create ACLs (alternative):        ./scripts/create_cc_infra/create-cc-acls.sh"
    echo
    print_info "NOTE: RBAC is recommended for Confluent Cloud. Use ACLs only if RBAC doesn't meet your needs."
}

# Main function
main() {
    # Default values (already set at top of script, but can be overridden by command line args)
    # PRINCIPALS_FILE and CONFIG_FILE are already set above
    DRY_RUN="false"
    VERBOSE="false"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--principals-file)
                PRINCIPALS_FILE="$2"
                shift 2
                ;;
            -c|--config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            -d|--dry-run)
                DRY_RUN="true"
                shift
                ;;
            -v|--verbose)
                VERBOSE="true"
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Convert relative paths to absolute paths
    if [[ ! "$PRINCIPALS_FILE" = /* ]]; then
        PRINCIPALS_FILE="$PROJECT_ROOT/$PRINCIPALS_FILE"
    fi
    if [[ ! "$CONFIG_FILE" = /* ]]; then
        CONFIG_FILE="$PROJECT_ROOT/$CONFIG_FILE"
    fi
    
    # Show header
    echo
    print_info "üîë Confluent Cloud Service Account Creator"
    echo "=========================================="
    echo
    
    # Show configuration
    show_config_summary
    
    # Show principals summary
    show_principals_summary
    
    # Validate prerequisites
    validate_prerequisites
    echo
    
    # Create service accounts
    if create_service_accounts; then
        echo
        
        # Update RBAC file with resource IDs (only if not dry run)
        if [[ "$DRY_RUN" != "true" ]]; then
            update_rbac_with_resource_ids
        else
            print_info "Skipping RBAC file update (dry run mode)"
            echo
        fi
        
        show_output_summary
        show_next_steps
        exit 0
    else
        exit 1
    fi
}

# Run main function with all arguments
main "$@" 